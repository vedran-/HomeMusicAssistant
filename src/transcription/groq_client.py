from groq import Groq\nimport os\nfrom typing import Optional\n\nfrom src.config.settings import AppSettings\nfrom src.utils.logger import app_logger\n\nclass GroqTranscriber:\n    def __init__(self, settings: AppSettings):\n        self.settings = settings\n        if not self.settings.groq_api_key:\n            app_logger.error(\"Groq API key is not configured. Transcription will fail.\")\n            raise ValueError(\"Groq API key is missing. Please set GROQ_API_KEY or add to config.json.\")\n        \n        self.client = Groq(\n            api_key=self.settings.groq_api_key\n        )\n        self.model = \"whisper-large-v3\" # As per TODO.md\n\n    def transcribe_audio(self, audio_file_path: str) -> Optional[str]:\n        if not os.path.exists(audio_file_path):\n            app_logger.error(f\"Audio file not found: {audio_file_path}\")\n            return None\n\n        app_logger.info(f\"Transcribing {audio_file_path} using Groq ({self.model})...\")\n\n        try:\n            with open(audio_file_path, \"rb\") as audio_file:\n                # The Groq SDK expects the file content to be read and passed.\n                # The 'file' parameter should be a tuple: (filename, file_content_bytes)\n                file_content = audio_file.read()\n                
                transcription_response = self.client.audio.transcriptions.create(\n                    file=(os.path.basename(audio_file_path), file_content),\n                    model=self.model\n                    # language=\"en\", # Optional\n                    # response_format=\"json\", # Default is json with a \"text\" field\n                )\n            
            app_logger.info(\"Transcription successful.\")\n            return transcription_response.text\n\n        except Exception as e:\n            app_logger.error(f\"Groq API transcription failed: {e}\", exc_info=True)\n            return None\n\nif __name__ == \'__main__\':\n    # This is for basic testing of the GroqTranscriber\n    # It requires a config.json with a valid GROQ_API_KEY and a dummy audio file.\n    from src.config.settings import load_settings\n    import tempfile\n    import wave\n\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    config_file_path = os.path.join(current_dir, \"..\", \"..\", \"config.json\")\n\n    if not os.path.exists(config_file_path):\n        print(f\"ERROR: config.json not found at {config_file_path}\")\n        config_file_path = \"config.json\"\n        if not os.path.exists(config_file_path):\n             print(f\"ERROR: config.json also not found at {os.path.abspath(config_file_path)}. Aborting test.\")\n            exit(1)\n        else:\n            print(f\"Found config.json at {os.path.abspath(config_file_path)}\")\n\n    # Create a dummy WAV file for testing\n    dummy_wav_path = None\n    try:\n        settings = load_settings(config_path=config_file_path)\n        app_logger.info(\"Settings loaded for GroqTranscriber test.\")\n\n        if not settings.groq_api_key:\n            app_logger.error(\"GROQ_API_KEY not set. Skipping transcription test.\")\n        else:\n            transcriber = GroqTranscriber(settings)\n            \n            # Create a very short, silent WAV file for the test to avoid actual speech processing costs/time\n            # and to ensure the API call structure is correct.\n            # A real test would use a known audio sample.\n            fd, dummy_wav_path = tempfile.mkstemp(suffix=\".wav\")\n            os.close(fd) # close file descriptor from mkstemp\n            \n            app_logger.info(f\"Creating dummy WAV: {dummy_wav_path}\")\n            with wave.open(dummy_wav_path, \'wb\') as wf:\n                wf.setnchannels(1)\n                wf.setsampwidth(2) # 2 bytes = 16-bit\n                wf.setframerate(16000)\n                # A very short audio clip (e.g., 0.1 seconds of silence)\n                # 16000 frames/sec * 0.1 sec = 1600 frames\n                # Each frame is 2 bytes (16-bit mono)\n                num_frames = 1600\n                silent_frame = b\'\\x00\\x00\' # 2 bytes of silence\n                frames_data = silent_frame * num_frames\n                wf.writeframes(frames_data)\n            app_logger.info(f\"Dummy WAV created.\")\n\n            app_logger.info(\"Attempting to transcribe dummy audio file...\")\n            # Note: Transcribing pure silence might result in an empty string or specific model behavior.\n            # This test primarily checks API connectivity and request format.\n            transcription = transcriber.transcribe_audio(dummy_wav_path)\n\n            if transcription is not None:\n                # Groq Whisper with silence often returns an empty string or a string with just a space/newline.\n                # This is expected for silent audio.\n                app_logger.info(f\"Test Transcription: '{transcription}'\")\n                if transcription.strip() == \"\":\n                    app_logger.info(\"Empty transcription for silent audio: OK.\")\n                else:\n                    app_logger.warning(f\"Non-empty transcription for silent audio: '{transcription}'.\")\n            else:\n                app_logger.error(\"Test transcription failed.\")\n\n    except ValueError as e: # Catch API key error from constructor\n        app_logger.error(f\"Init error: {e}\")\n    except FileNotFoundError as e:\n        app_logger.error(f\"Config file error: {e}\")\n    except Exception as e:\n        app_logger.error(f\"GroqTranscriber test error: {e}\", exc_info=True)\n    finally:\n        if dummy_wav_path and os.path.exists(dummy_wav_path):\n            try:\n                os.remove(dummy_wav_path)\n                app_logger.info(f\"Cleaned dummy WAV: {dummy_wav_path}\")\n            except Exception as e:\n                app_logger.error(f\"Error cleaning dummy WAV {dummy_wav_path}: {e}\")\n        app_logger.info(\"GroqTranscriber test finished.\")\n\n 